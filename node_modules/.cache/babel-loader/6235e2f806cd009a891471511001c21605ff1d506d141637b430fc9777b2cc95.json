{"ast":null,"code":"import { CREATE_COMMENT_SUCCESS, CREATE_POST_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, GET_ALL_POST_FAILURE, GET_ALL_POST_REQUEST, GET_ALL_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS } from \"./post.actionType\";\nconst initialState = {\n  post: null,\n  loading: false,\n  error: null,\n  posts: [],\n  like: null,\n  comments: [],\n  newComment: null\n};\nexport const postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_POST_REQUEST:\n    case GET_ALL_POST_REQUEST:\n    case LIKE_POST_REQUEST:\n      return {\n        ...state,\n        error: null,\n        loading: false\n      };\n    case CREATE_POST_SUCCESS:\n      return {\n        ...state,\n        post: action.payload,\n        posts: [action.payload, ...state.posts],\n        loading: false,\n        error: null\n      };\n    case GET_ALL_POST_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload,\n        comments: action.payload.comments,\n        loading: false,\n        error: null\n      };\n    case LIKE_POST_SUCCESS:\n      return {\n        ...state,\n        like: action.payload,\n        posts: state.posts.map(item => item.id === action.payload.id ? action.payload : item),\n        loading: false,\n        error: null\n      };\n    case CREATE_COMMENT_SUCCESS:\n      return {\n        ...state,\n        newComment: action.payload,\n        loading: false,\n        error: null\n      };\n    case CREATE_POST_FAILURE:\n    case GET_ALL_POST_FAILURE:\n    case LIKE_POST_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["CREATE_COMMENT_SUCCESS","CREATE_POST_FAILURE","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","GET_ALL_POST_FAILURE","GET_ALL_POST_REQUEST","GET_ALL_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","initialState","post","loading","error","posts","like","comments","newComment","postReducer","state","action","type","payload","map","item","id"],"sources":["/home/shabab/VS-Code code/sabab_social/src/Redux/Post/post.reducer.js"],"sourcesContent":["import { CREATE_COMMENT_SUCCESS, CREATE_POST_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, GET_ALL_POST_FAILURE, GET_ALL_POST_REQUEST, GET_ALL_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS } from \"./post.actionType\"\n\nconst initialState={\n    post:null,\n    loading:false,\n    error:null,\n    posts:[],\n    like:null,\n    comments:[],\n    newComment:null\n}\n\nexport const postReducer=(state=initialState,action)=>{\n    switch(action.type){\n        case CREATE_POST_REQUEST:\n        case GET_ALL_POST_REQUEST:\n        case LIKE_POST_REQUEST:\n            return {...state, error:null, loading:false}\n\n        case CREATE_POST_SUCCESS:\n            return{\n                ...state,\n                post:action.payload,\n                posts:[action.payload,...state.posts],\n                loading:false,\n                error:null\n            };\n        case GET_ALL_POST_SUCCESS:\n            return {\n                ...state,\n                posts: action.payload,\n                comments:action.payload.comments,\n                loading: false,\n                error: null,\n            };\n        case LIKE_POST_SUCCESS:\n            return {\n                ...state,\n                like:action.payload,\n                posts:state.posts.map((item)=>item.id===action.payload.id?action.payload:item),\n                loading:false,\n                error:null\n            }\n        case CREATE_COMMENT_SUCCESS:\n            return {...state,\n                newComment:action.payload,\n                 loading: false,\n                error: null}\n        case CREATE_POST_FAILURE:\n        case GET_ALL_POST_FAILURE:\n        case LIKE_POST_FAILURE:\n            return {...state, error:action.payload, loading:false}\n\n        default:\n            return state;\n    }\n}"],"mappings":"AAAA,SAASA,sBAAsB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,mBAAmB;AAEpP,MAAMC,YAAY,GAAC;EACfC,IAAI,EAAC,IAAI;EACTC,OAAO,EAAC,KAAK;EACbC,KAAK,EAAC,IAAI;EACVC,KAAK,EAAC,EAAE;EACRC,IAAI,EAAC,IAAI;EACTC,QAAQ,EAAC,EAAE;EACXC,UAAU,EAAC;AACf,CAAC;AAED,OAAO,MAAMC,WAAW,GAACA,CAACC,KAAK,GAACT,YAAY,EAACU,MAAM,KAAG;EAClD,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKnB,mBAAmB;IACxB,KAAKG,oBAAoB;IACzB,KAAKG,iBAAiB;MAClB,OAAO;QAAC,GAAGW,KAAK;QAAEN,KAAK,EAAC,IAAI;QAAED,OAAO,EAAC;MAAK,CAAC;IAEhD,KAAKT,mBAAmB;MACpB,OAAM;QACF,GAAGgB,KAAK;QACRR,IAAI,EAACS,MAAM,CAACE,OAAO;QACnBR,KAAK,EAAC,CAACM,MAAM,CAACE,OAAO,EAAC,GAAGH,KAAK,CAACL,KAAK,CAAC;QACrCF,OAAO,EAAC,KAAK;QACbC,KAAK,EAAC;MACV,CAAC;IACL,KAAKP,oBAAoB;MACrB,OAAO;QACH,GAAGa,KAAK;QACRL,KAAK,EAAEM,MAAM,CAACE,OAAO;QACrBN,QAAQ,EAACI,MAAM,CAACE,OAAO,CAACN,QAAQ;QAChCJ,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACX,CAAC;IACL,KAAKJ,iBAAiB;MAClB,OAAO;QACH,GAAGU,KAAK;QACRJ,IAAI,EAACK,MAAM,CAACE,OAAO;QACnBR,KAAK,EAACK,KAAK,CAACL,KAAK,CAACS,GAAG,CAAEC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAGL,MAAM,CAACE,OAAO,CAACG,EAAE,GAACL,MAAM,CAACE,OAAO,GAACE,IAAI,CAAC;QAC9EZ,OAAO,EAAC,KAAK;QACbC,KAAK,EAAC;MACV,CAAC;IACL,KAAKb,sBAAsB;MACvB,OAAO;QAAC,GAAGmB,KAAK;QACZF,UAAU,EAACG,MAAM,CAACE,OAAO;QACxBV,OAAO,EAAE,KAAK;QACfC,KAAK,EAAE;MAAI,CAAC;IACpB,KAAKZ,mBAAmB;IACxB,KAAKG,oBAAoB;IACzB,KAAKG,iBAAiB;MAClB,OAAO;QAAC,GAAGY,KAAK;QAAEN,KAAK,EAACO,MAAM,CAACE,OAAO;QAAEV,OAAO,EAAC;MAAK,CAAC;IAE1D;MACI,OAAOO,KAAK;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}