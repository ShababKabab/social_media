{"ast":null,"code":"import { api } from \"../../config/api\";\nimport * as actionType from \"./message.actionType\";\nexport const createMessage = reqData => async dispatch => {\n  dispatch({\n    type: actionType.CREATE_MESSAGE_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await api.post(`/api/messages/chat/${reqData.message.chatId}`, reqData.message);\n    reqData.sendMessageToServer(data);\n    console.log(\"create message\", data);\n    dispatch({\n      type: actionType.CREATE_MESSAGE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"CATCH ERROR\", error);\n    dispatch({\n      type: actionType.CREATE_MESSAGE_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const createChat = chat => async dispatch => {\n  dispatch({\n    type: actionType.CREATE_CHAT_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await api.post(`/api/chats`, chat);\n    console.log(\"create chat\", data);\n    dispatch({\n      type: actionType.CREATE_CHAT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"CATCH ERROR\", error);\n    dispatch({\n      type: actionType.CREATE_CHAT_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getAllChats = () => async dispatch => {\n  dispatch({\n    type: actionType.GET_ALL_CHATS_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await api.get(`/api/chats`);\n    console.log(\"get all chats \", data);\n    dispatch({\n      type: actionType.GET_ALL_CHATS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"CATCH ERROR\", error);\n    dispatch({\n      type: actionType.GET_ALL_CHATS_FAILURE,\n      payload: error\n    });\n  }\n};","map":{"version":3,"names":["api","actionType","createMessage","reqData","dispatch","type","CREATE_MESSAGE_REQUEST","data","post","message","chatId","sendMessageToServer","console","log","CREATE_MESSAGE_SUCCESS","payload","error","CREATE_MESSAGE_FAILURE","createChat","chat","CREATE_CHAT_REQUEST","CREATE_CHAT_SUCCESS","CREATE_CHAT_FAILURE","getAllChats","GET_ALL_CHATS_REQUEST","get","GET_ALL_CHATS_SUCCESS","GET_ALL_CHATS_FAILURE"],"sources":["/home/shabab/VS-Code code/sabab_social/src/Redux/Message/message.action.js"],"sourcesContent":["import { api } from \"../../config/api\"\nimport * as actionType from \"./message.actionType\"\n\nexport const createMessage=(reqData)=>async(dispatch)=>{\n    dispatch({type:actionType.CREATE_MESSAGE_REQUEST})\n    try {\n        const {data} = await api.post(`/api/messages/chat/${reqData.message.chatId}`, reqData.message);\n        reqData.sendMessageToServer(data)\n        console.log(\"create message\",data)\n\n        dispatch({ type: actionType.CREATE_MESSAGE_SUCCESS, payload: data});\n        \n    } catch (error) {\n        console.log(\"CATCH ERROR\", error);\n        dispatch({\n            type: actionType.CREATE_MESSAGE_FAILURE,\n            payload: error,\n        });\n    }\n};\n\nexport const createChat=(chat)=>async(dispatch)=>{\n    dispatch({type:actionType.CREATE_CHAT_REQUEST})\n    try {\n        const {data} = await api.post(`/api/chats`,chat);\n        console.log(\"create chat\", data)\n\n        dispatch({ type: actionType.CREATE_CHAT_SUCCESS, payload: data});\n        \n    } catch (error) {\n        console.log(\"CATCH ERROR\", error);\n        dispatch({\n            type: actionType.CREATE_CHAT_FAILURE,\n            payload: error,\n        });\n    }\n};\n\nexport const getAllChats=()=>async(dispatch)=>{\n    dispatch({type:actionType.GET_ALL_CHATS_REQUEST})\n    try {\n        const {data} = await api.get(`/api/chats`);\n        console.log(\"get all chats \",data)\n\n        dispatch({ type: actionType.GET_ALL_CHATS_SUCCESS, payload: data});\n\n        \n    } catch (error) {\n        console.log(\"CATCH ERROR\", error);\n        dispatch({\n            type: actionType.GET_ALL_CHATS_FAILURE,\n            payload: error,\n        });\n    }\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAO,KAAKC,UAAU,MAAM,sBAAsB;AAElD,OAAO,MAAMC,aAAa,GAAEC,OAAO,IAAG,MAAMC,QAAQ,IAAG;EACnDA,QAAQ,CAAC;IAACC,IAAI,EAACJ,UAAU,CAACK;EAAsB,CAAC,CAAC;EAClD,IAAI;IACA,MAAM;MAACC;IAAI,CAAC,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAE,sBAAqBL,OAAO,CAACM,OAAO,CAACC,MAAO,EAAC,EAAEP,OAAO,CAACM,OAAO,CAAC;IAC9FN,OAAO,CAACQ,mBAAmB,CAACJ,IAAI,CAAC;IACjCK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACN,IAAI,CAAC;IAElCH,QAAQ,CAAC;MAAEC,IAAI,EAAEJ,UAAU,CAACa,sBAAsB;MAAEC,OAAO,EAAER;IAAI,CAAC,CAAC;EAEvE,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,KAAK,CAAC;IACjCZ,QAAQ,CAAC;MACLC,IAAI,EAAEJ,UAAU,CAACgB,sBAAsB;MACvCF,OAAO,EAAEC;IACb,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAME,UAAU,GAAEC,IAAI,IAAG,MAAMf,QAAQ,IAAG;EAC7CA,QAAQ,CAAC;IAACC,IAAI,EAACJ,UAAU,CAACmB;EAAmB,CAAC,CAAC;EAC/C,IAAI;IACA,MAAM;MAACb;IAAI,CAAC,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAE,YAAW,EAACW,IAAI,CAAC;IAChDP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEN,IAAI,CAAC;IAEhCH,QAAQ,CAAC;MAAEC,IAAI,EAAEJ,UAAU,CAACoB,mBAAmB;MAAEN,OAAO,EAAER;IAAI,CAAC,CAAC;EAEpE,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,KAAK,CAAC;IACjCZ,QAAQ,CAAC;MACLC,IAAI,EAAEJ,UAAU,CAACqB,mBAAmB;MACpCP,OAAO,EAAEC;IACb,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAMO,WAAW,GAACA,CAAA,KAAI,MAAMnB,QAAQ,IAAG;EAC1CA,QAAQ,CAAC;IAACC,IAAI,EAACJ,UAAU,CAACuB;EAAqB,CAAC,CAAC;EACjD,IAAI;IACA,MAAM;MAACjB;IAAI,CAAC,GAAG,MAAMP,GAAG,CAACyB,GAAG,CAAE,YAAW,CAAC;IAC1Cb,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACN,IAAI,CAAC;IAElCH,QAAQ,CAAC;MAAEC,IAAI,EAAEJ,UAAU,CAACyB,qBAAqB;MAAEX,OAAO,EAAER;IAAI,CAAC,CAAC;EAGtE,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,KAAK,CAAC;IACjCZ,QAAQ,CAAC;MACLC,IAAI,EAAEJ,UAAU,CAAC0B,qBAAqB;MACtCZ,OAAO,EAAEC;IACb,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}