{"ast":null,"code":"import { api } from \"../../config/api\";\nimport { CREATE_COMMENT_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_POST_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, GET_ALL_POST_FAILURE, GET_ALL_POST_REQUEST, GET_ALL_POST_SUCCESS, GET_USERS_POST_FAILURE, GET_USERS_POST_REQUEST, GET_USERS_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS } from \"./post.actionType\";\nexport const createPostAction = postData => async dispatch => {\n  dispatch({\n    type: CREATE_POST_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await api.post('/api/posts', postData);\n    dispatch({\n      type: CREATE_POST_SUCCESS,\n      payload: data\n    });\n    console.log(\"created post\", data);\n  } catch (error) {\n    console.log(\"error\", error);\n    dispatch({\n      type: CREATE_POST_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getAllPostAction = () => async dispatch => {\n  dispatch({\n    type: GET_ALL_POST_REQUEST\n  });\n  try {\n    // console.log(\"before post -->>\",data)\n    const {\n      data\n    } = await api.get(\"/api/posts\");\n    dispatch({\n      type: GET_ALL_POST_SUCCESS,\n      payload: data\n    });\n    console.log(\"get all post -->\", data);\n  } catch (error) {\n    console.log(\"error\", error);\n    dispatch({\n      type: GET_ALL_POST_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUsersPostAction = userId => async dispatch => {\n  dispatch({\n    type: GET_USERS_POST_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/user/${userId}`);\n    dispatch({\n      type: GET_USERS_POST_SUCCESS,\n      payload: data\n    });\n    console.log(\"get user post\", data);\n  } catch (error) {\n    console.log(\"error\", error);\n    dispatch({\n      type: GET_USERS_POST_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const likePostAction = postId => async dispatch => {\n  dispatch({\n    type: LIKE_POST_REQUEST\n  });\n  console.log(\"ashtese\");\n  try {\n    const {\n      data\n    } = await api.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: LIKE_POST_SUCCESS,\n      payload: data\n    });\n    console.log(\"like post\", data);\n  } catch (error) {\n    console.log(\"error\", error);\n    dispatch({\n      type: LIKE_POST_FAILURE,\n      payload: error\n    });\n  }\n};\n\n// create comment\n\nexport const createCommentAction = reqData => async dispatch => {\n  dispatch({\n    type: CREATE_COMMENT_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await api.post(`/api/comments/post/${reqData.postId}`, reqData.data);\n    dispatch({\n      type: CREATE_COMMENT_SUCCESS,\n      payload: data\n    });\n    console.log(\"created comment\", data);\n  } catch (error) {\n    console.log(\"error\", error);\n    dispatch({\n      type: CREATE_COMMENT_FAILURE,\n      payload: error\n    });\n  }\n};","map":{"version":3,"names":["api","CREATE_COMMENT_FAILURE","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_POST_FAILURE","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","GET_ALL_POST_FAILURE","GET_ALL_POST_REQUEST","GET_ALL_POST_SUCCESS","GET_USERS_POST_FAILURE","GET_USERS_POST_REQUEST","GET_USERS_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","createPostAction","postData","dispatch","type","data","post","payload","console","log","error","getAllPostAction","get","getUsersPostAction","userId","likePostAction","postId","put","createCommentAction","reqData"],"sources":["/home/shabab/VS-Code code/sabab_social/src/Redux/Post/post.action.js"],"sourcesContent":["import { api } from \"../../config/api\"\nimport { CREATE_COMMENT_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_POST_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, GET_ALL_POST_FAILURE, GET_ALL_POST_REQUEST, GET_ALL_POST_SUCCESS, GET_USERS_POST_FAILURE, GET_USERS_POST_REQUEST, GET_USERS_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS } from \"./post.actionType\"\n\nexport const createPostAction=(postData)=>async(dispatch)=>{\n    dispatch({type:CREATE_POST_REQUEST})\n    try {\n        const {data}=await api.post('/api/posts',postData)\n        dispatch({type:CREATE_POST_SUCCESS,payload:data})\n        console.log(\"created post\", data)\n    } catch (error) {\n        console.log(\"error\",error)\n        dispatch({type:CREATE_POST_FAILURE,payload:error})\n    }\n}\n\nexport const getAllPostAction = () => async(dispatch)=>{\n    dispatch({type:GET_ALL_POST_REQUEST});\n    try {\n        // console.log(\"before post -->>\",data)\n        const {data}=await api.get(\"/api/posts\")\n        dispatch({type:GET_ALL_POST_SUCCESS,payload:data})\n        console.log(\"get all post -->\", data)\n    } catch (error) {\n        console.log(\"error\",error)\n        dispatch({type:GET_ALL_POST_FAILURE,payload:error})\n    }\n}\n\nexport const getUsersPostAction=(userId)=>async(dispatch)=>{\n    dispatch({type:GET_USERS_POST_REQUEST})\n    try {\n        const {data}=await api.get(`/api/posts/user/${userId}`)\n        dispatch({type:GET_USERS_POST_SUCCESS,payload:data})\n        console.log(\"get user post\", data)\n    } catch (error) {\n        console.log(\"error\",error)\n        dispatch({type:GET_USERS_POST_FAILURE,payload:error})\n    }\n}\n\nexport const likePostAction = (postId) => async (dispatch)=>{\n    dispatch({type: LIKE_POST_REQUEST})\n    console.log(\"ashtese\")\n    try {\n        const { data } = await api.put(`/api/posts/like/${postId}`)\n        dispatch({type:LIKE_POST_SUCCESS,payload:data})\n        console.log(\"like post\", data)\n    } catch (error) {\n        console.log(\"error\",error)\n        dispatch({type:LIKE_POST_FAILURE,payload:error})\n    }\n}\n\n// create comment\n\nexport const createCommentAction=(reqData)=>async(dispatch)=>{\n    dispatch({type:CREATE_COMMENT_REQUEST})\n    try {\n        const {data}=await api.post(`/api/comments/post/${reqData.postId}`,reqData.data)\n        dispatch({type:CREATE_COMMENT_SUCCESS,payload:data})\n        console.log(\"created comment\", data)\n    } catch (error) {\n        console.log(\"error\",error)\n        dispatch({type:CREATE_COMMENT_FAILURE,payload:error})\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}